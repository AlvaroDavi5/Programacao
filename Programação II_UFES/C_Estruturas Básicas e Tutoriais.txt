Comentários em C:

// Comentário em Uma Linha

/*

    Comentário
	em
Múltiplas Linhas

*/


Tipos primitivos em C:
pointer, char, int, float, double, void (e long, como complemento)

Tipos complexos em C:
struct, array



Função Principal:

int main()
{
	printf("Oiiiii");
	return 0;			retorna 0 ao sistema operacional, indicando o fim do programa (POR CONVENÇÃO: retorna 0 caso tudo ocorra bem, retorna um número diferente de 0 caso ocorra um erro)
}



Definir Constantes Simbólicas em escopo global:
#define Pi = 3.141593



Formatação de Saída:

%c		char
%s		string
%[]		string, sem ignorar qualquer caractere (se usado [^,] o programa para de ler ao encontrar uma ',';	se usado [a-z] o programa lê de 'a' até 'z' e para quando um caractere não se encontra no intervalo)
%d		número na base decimal
%o		número na base octal
%x		número na base hexadecimal
%e		número em notação científica
%p		endereço do ponteiro
%u		número sem sinal
%i		int
%l		long int
%f		float
&lf		long float (double)
%04d	4 casas deicimais de zeros à esquerda do número
%6i		número com 6 casas deicimais, se o número possuim menos de 6 casas são imprimidos espaços em branco
%.2f	2 casas deicimais após o ponto flutuante
%d*c%d	ignora um caractere entre os dois números
%%		sinal de %



Caracteres Especiais:  [CARACTERES IGNORADOS, FUNÇÕES ATIVADAS]

\n		(newline, nova linha)
\r		(carriage return, retorno ao início da linha)
\b		(backspace, apaga um caractere atrás)
\t		(tab, tabulação)
\0		(null, caractere nulo)
\a		(Beep, som)
\7		(Beep, som)
\"		(quote, aspas)
\'		(single quote, apóstrofo)
\\		(backslash, contrabarra)



Incluir bibliotecas:
#include <stdio.h>		Standart Input/Output, para funções como getchar(), putchar(), scanf(), printf(), fopen() e tipos como FILE e EOF
#include <stdlib.h>		Standart Library, para Emulação de Terminal (Shell, DOS, etc) e para funções como rand(), srand(), sizeof(), malloc(), stdin() e stdout()
#include <stdbool.h>	Standart Boolean, para tipos Booleanos (0 e 1, false e true)
#include <stddef.h>		Padrões de Definições de Tipos
#include <stdint.h>		Padrões de Definição de Tipos de Dados Inteiros
#include <float.h>		Define Limites e Precisão de Variáveis Reais (com Ponto Flutuante)
#include <time.h>		Para Medir o Tempo Dentro de um Programa e para funções como time() e clock()
#include <math.h>		Para Operações Matemáticas e para funções como sqrt(), pow(), log() e sin()
#include <tgmath.h>		Para Implementar Facilidades para Utilização de Funções Matemáticas
#include <complex.h>	Para Manipulação de Números Complexos
#include <string.h>		Para Manipulação de Strings e para funções como strlen(), strcpy(), strcat() e strcmp()
#include <locale.h>		Para Localização de Programas, Unidades de Medidas/Monetárias e Acentuação de Acordo com o Idioma e a Região e para funções como setlocale()
#include <ctype.h>		Para Classificar Caracteres ASCII e para funções como isdigit(), islower() e isalnum()
#include <conio.h>		Para Manipular Caracteres na Tela e para funções como getch(), gotoxy(), clrscr(), textbackground(), texcolor() e cprintf()
#include <assert.h>		Implementa Ajuda na Detecção de Erros em Versões de Depuração
#include <errno.h>		Teste de Códigos de Erro Reportados pelas Funções de Bibliotecas
#include <signal.h>		Implementa Definições para Receber e Tratar de Sinais



Para compilar um arquivo se usa o programa gcc (clang)

	gcc caminho/codigofonte.c -o caminho/arquivoexecutavel

Para executar o arquivo compilado se usa o comando

	./caminho/arquivoexecutavel



Para apenas mandar um arquivo como input de um programa se usa o comando

	./arquivoexecutavel < caminho/arquivoinput					< para o input


Para apenas salvar um arquivo como output de um programa se usa o comando

	./arquivoexecutavel > caminho/arquivooutput					> para o output


Para mandar um arquivo como input de um programa e salvar o output se usa o comando

	./arquivoexecutavel < caminho/arquivoinput > caminho/arquivooutput					< > para o input e output



Para ver a diverença entre dois arquivos se usa o programa diff

	diff arquivo1 arquivo2
