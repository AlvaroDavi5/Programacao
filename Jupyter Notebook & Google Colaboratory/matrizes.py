# -*- coding: utf-8 -*-
"""Matrizes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EIJewbfua9_8niHLx9rsIyRnr6KyJrV9

#Básico de Vetores e Matrizes para Transformações Geométricas 
#Parte 2 - Matrizes

Esse notebook traz as operações básicas para se criar e manipular matrizes.

#Bibliotecas 

A biblioteca principal é a Numpy, a qual é uma parte do Scypi "Python-based ecosystem of open-source software for mathematics, science, and engineering".

Para começar qualquer código, nós temos que primeiro importa as bibliotecas:
"""

import numpy as np
import scipy
import matplotlib.pyplot as plt

"""## Matrizes
Vetores bidimensionais são chamados de matrizes.
Em transformações geométricas, as transformações são representadas na forma de matrizes, assim como objetos a serem transformados.

Uma matriz $\mathbf{\mathit{A}}$ é definida como:
> \begin{bmatrix}
a_{11} & a_{12} & \cdots  & a_{1n} \\ 
a_{21} & a_{22} & \cdots  & a_{2n} \\ 
\vdots & \vdots  & \vdots  & \vdots \\ 
a_{m1} & a_{m2} & \cdots  & a_{mn} \\ 
\end{bmatrix}

As dimensões de uma matriz são normalmente expressas como  $m \times n$, sendo  $m$ o número de linhas e $n$ o número de colunas. Se $m=n$, a matriz é chamada de matrix quadrada.
Em Python, usando Numpy, podemos criar uma matriz como:
"""

A = np.array([[1,2,3,0],[4,5,6,0],[7.3,8,9,1],[4,7,3,1.6],[1.4,5,0,7.9]])
print(A)

"""Também no caso de matrizes, podemos visualizar algumas de suas informações usando os seguintes métodos:"""

print('Data type:', A.dtype)
print('Matrix size:', A.size)
print('Matrix size:', A.shape)
print('Rows:', A.shape[0], ' Columns: ', A.shape[1])
print('Data: \n', A)

"""Para selecionar um elemento, uma linha ou coluna de matriz, basta fazer o seguinte:"""

print(A)
#Elemento da quarta linha e terceira coluna
a43 = A[3,2]
print("Elemento a43: ", a43)
#primeira linha da matrix
l = A[0,:]
print("Primeira linha: ", l)
# terceira coluna
c = A[:,2]
print("Terceira coluna: ", c)
# Selecionando uma submatrix 
s = A[0:4,2:4]
print("Submatrix:\n",s)

"""#Atenção: 
###Em Numpy, a primeira linha ou coluna da matrix possui índice 0 (zero), enquanto a última linha possui índice igual a m-1, e a última coluna índice n-1.
###Quando for definir um intervalo de seleção [k:w], o índice k está incluso e o índice w não está incluso.

## Operações básicas com matrizes
Podemos realizar com matrizes operações semelhantes às que fizemos com vetores. A principal diferença é a maneira como aplicamos essas operações.

### Adição
Para somar duas matrizes $\mathbf{\mathit{A}}$ e $\mathbf{\mathit{B}}$, ambas devem possuir as mesmas dimensões. A operação de adição acontece elemento a elemento e resulta numa matriz C com as mesmas dimensões de  $\mathbf{\mathit{A}}$ e $\mathbf{\mathit{B}}$. 

>$C = A + B$

Exemplo:
"""

A = np.array([[1,2,3],[4,5,6],[7,8,9]])
B = np.array([[1,1,1],[0,0,0],[1,1,1]])
C = A+B
print(A, '\n')
print(B, '\n')
print(C)

"""### Subtração
Similar à adição, para subtrair uma matriz $\mathbf{\mathit{B}}$ de uma matriz $\mathbf{\mathit{A}}$ é preciso que ambas poossuam as mesmas dimensões. O resultado é uma matriz $\mathbf{\mathit{C}}$ com a mesma forma de $\mathbf{\mathit{A}}$ e $\mathbf{\mathit{B}}$. 
> $C = A - B$

Veja o exemplo onde subtraimos a matriz $\mathbf{\mathit{B}}$ da matriz  $\mathbf{\mathit{A}}$:
"""

A = np.array([[1, 2, 3],[4, 5, 6], [7, 8, 9]])
B = np.array([[-1,-1,-1], [1,1,1], [1,1,1]])
C = A - B
print(A, '\n')
print(B, '\n')
print(C)

"""### Multiplicação de matraizes

Considere duas matrizes : $\mathbf{\mathit{A}}$ de tamanho $m \times  n$  e $\mathbf{\mathit{B}}$ de tamanho $n \times p$. Essas matrizes,  m x n e n x p são compatíveis para se realizar a multiplicação. O resultado será uma matriz de tamanho m x p. 

> $C_{m \times p} =A_{m \times n} . B_{n \times p}$

Cada elemento de $C$ é dado por:
> $c_{i,j}=\sum_{k=1}^{n}a_{i,k}b_{k,j}$

Como a multiplicação de matrizes depende da ordem de multiplicação, reverter a multiplicação pode gerar um resultado diferente ou uma multiplicação inválida, devido a não compatibilidade de tamanhos.

Exemplo de como realizar a multiplicação:
"""

# Matriz (2x3)
A = np.array([[1,2,3],[4,5,6]])
# Matriz (3x2)
B = np.array([[1,0],[0,1],[1,0]])
C=np.dot(A,B) # tamanho resultante (2x2), no caso de vetores np.dot() devolve produto interno; no caso de matrizes np.dot() devolve multiplicacao de matrizes
print(A, '\n')
print(B, '\n')
print(C, '\n')

"""##Usando np.matrix ao invés de np.array
Ao invés de usarmos np.array, também podemos criar matrizes usando np.matrix e realizar as operações de adição, subtração e multiplicação.
"""

A = np.matrix('1 2 3; 4 5 6')
B = np.matrix('1 0; 0 1; 1 0')
print(A)
print('Matrix shape:',A.shape, '\n')
print(B)
print('Matrix shape:',B.shape, '\n')

"""###Adição"""

A = np.matrix('1 2 3; 4 5 6')
B = np.matrix('1 1 1; 0 0 1')
C = A+B
print(A, '\n')
print(B, '\n')
print(C, '\n')

"""###Subtração"""

A = np.matrix('1 2 3; 4 5 6')
B = np.matrix('1 1 1; -1 1 -1')
C = A-B
print(A, '\n')
print(B, '\n')
print(C, '\n')

"""###Multiplicação
Note a diferença entre usar np.array e np.matrix para essa operação.
"""

A = np.matrix('1 2 3; 4 5 6')
B = np.matrix('1 0; 0 1; 1 0')
C = A*B
D = np.dot(A,B)
print(A, '\n')
print(B, '\n')
print(C, '\n')
print(D, '\n')

"""## Propriedades de matrizes
Vamos ver algumas propriedades e ainda mais algumas operações.

### Matriz Transposta
Quando trocamos as linhas pelas colunas de uma matriz $A$, estamos fazendo a sua transposta, representada por $A^T$.
Exemplo:
"""

# usando np.array
A = np.array([[0, 2, 1],[4, 5, 6]])
print('Matrix A:')
print(A, '\n')
print('A_transpose:')
print(np.transpose(A))
#outra forma
print('A_transpose: \n', A.T, '\n')
#usando np.matrix
B = np.matrix ('1 2 3; 8 8 8')
print('Matrix B:')
print(B, '\n')
print('B_transpose:')
print(np.transpose(B))
#outra forma
print('B_transpose: \n',B.T)

"""### Matriz Identidade
Matriz quadrada que possui os elementos da diagonal iguais a $1$ e os demais elementos iguais a $0$ (zero).

Para criar uma matriz identidade:
"""

I = np.identity(3) #size of identity matrix
print(I,'\n')
I = np.identity(15) #size of identity matrix
print(I)

"""### Matriz Zero
Para criar uma matriz de zeros, ou mesmo um vetor de zeros:
"""

#matriz de zeros 3x4
A = np.zeros((3,5))
print("Matriz de zeros: \n",A)
#vetor linha de zeros
v = np.zeros((3))
print("Vetor linha de zeros: \n",v)
#vetor coluna de zeros
v = np.zeros((4,1))
print("Vetor coluna de zeros: \n",v)

"""###Matriz de uns
Para criar uma matriz ou vetor de uns:
"""

#matriz de uns 3x4
A = np.ones((6,4))
print("Matriz de uns: \n",A)
#vetor linha de uns
v = np.ones((9))
print("Vetor linha de uns: \n",v)
#vetor coluna de uns
v = np.ones((3,1))
print("Vetor coluna de uns: \n",v)

"""### Inversa de uma matriz quadrada
A matriz inversa é normalmente definida como $A^{-1}$, e possui a seguinte propriedade:
> $AA^{-1} = I = A^{-1}A$

A matriz inversa é única para cada matriz. Entretanto, nem todas as matrizes são inversíveis.

Para calcular a inversa de uma matriz quadrada, usamos o seguinte:
"""

A = np.array([[1, 2, 3],[5, 4, 6], [9, 8, 7]])
# como calcular a inversa
A_inv = np.linalg.inv(A)
print("matrix A:\n",A, '\n')
print("inversa de A:\n",A_inv, '\n')
# repare que se multiplicar A pela sua inversa obtemos a identidade
print("A * A_inv:\n", np.dot(A,A_inv))

"""###Criando matrizes ou vetores com valores randômicos

"""

#matriz com valores randomicos
A = np.random.rand(4,6)
print("A:\n",A, '\n')

#vetor com valores randomicos
v = np.random.rand(7)
print("v:\n",v)

"""###Acrescentando linhas ou colunas a matrizes

Para acrescentar uma linha a uma matriz:
"""

A = np.array([[1, 2, 3],[4, 5, 6], [7, 8, 9]])
print("A:\n",A)
#acrescentando um linha no final
A = np.vstack([A,[0,0,1]])
print("A:\n",A)
#acrescentando uma coluna no final
A = np.hstack((A,[[3],[0],[7],[2]]))
print("A:\n",A)
#acrescentando uma linha no meio da matriz
A = np.vstack([A[0:1],[3,3,3,3],A[1:4]])
print("A:\n",A)
#acrescentando uma coluna no meio da matriz
A = np.hstack([A[:,0:3],np.array([[0],[0],[0],[0],[0]]),A[:,3:4]])
print("A:\n",A)

"""### Eliminado linhas ou colunas"""

A = np.random.rand(5,4)
print("A:\n",A)
A = np.delete(A, 1, 0) # o valor zero no último elemento representa o eixo horizontal -> linha
print("A:\n",A)
A = np.delete(A, 2, 1) # o valor um no último elemento representa o eixo vertical -> coluna
print("A:\n",A)