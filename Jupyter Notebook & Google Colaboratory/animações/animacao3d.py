# -*- coding: utf-8 -*-
"""Animacao3D.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xQ3wTnrmPqwxnvJWIGoAwHYls1f2fuAf
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D  
from matplotlib import animation, rc


# Translation Function
def move3D(dx,dy,dz):
  T = np.eye(4)
  T[0,3] = dx
  T[1,3] = dy
  T[2,3] = dz
  return T




#Creating a house

house = np.array([[0,         0,         0],
         [0,  -10.0000,         0],
         [0, -10.0000,   12.0000],
         [0,  -10.4000,   11.5000],
         [0,   -5.0000,   16.0000],
         [0,         0,   12.0000],
         [0,    0.5000,   11.4000],
         [0,         0,   12.0000],
         [0,         0,         0],
  [-12.0000,         0,         0],
  [-12.0000,   -5.0000,         0],
  [-12.0000,  -10.0000,         0],
         [0,  -10.0000,         0],
         [0,  -10.0000,   12.0000],
[-12.0000,  -10.0000,   12.0000],
  [-12.0000,         0,   12.0000],
         [0,         0,   12.0000],
         [0,  -10.0000,   12.0000],
         [0,  -10.5000,   11.4000],
  [-12.0000,  -10.5000,   11.4000],
  [-12.0000,  -10.0000,   12.0000],
  [-12.0000,   -5.0000,   16.0000],
         [0,   -5.0000,   16.0000],
         [0,    0.5000,   11.4000],
  [-12.0000,    0.5000,   11.4000],
  [-12.0000,         0,   12.0000],
  [-12.0000,   -5.0000,   16.0000],
  [-12.0000,  -10.0000,   12.0000],
  [-12.0000,  -10.0000,         0],
  [-12.0000,   -5.0000,         0],
  [-12.0000,         0,         0],
  [-12.0000,         0,   12.0000],
  [-12.0000,         0,         0]])

house = np.transpose(house)
#Representing the object in homogeneous coordinates
#create row of ones
num_columns = np.size(house,1)
ones_line = np.ones(num_columns)
#add to the house matrix to represent the house in homogeneous coordinates
house = np.vstack([house, ones_line])





fig = plt.figure(figsize=(10,10))
ax0 = plt.axes(projection='3d')
plt.close()


ax0.set_xlim3d((-50, 50))
ax0.set_ylim3d((-50, 50))
ax0.set_zlim3d((-10, 50))

# Listing the objects that are going to be drawn
obj1, = ax0.plot3D([], [], [], lw=2,color='#4004B0' )
obj2, = ax0.plot3D([], [], [],'--', lw=2)  
  

# initialization function: 
def init():
    obj1.set_data(house[0,:], house[1,:])
    obj1.set_3d_properties(house[2,:])
    return (obj1,)

# animation function. This is called sequentially
def animate(i):
  # Defining the translation to be applied to a second object
  T3 = move3D(-0.05*i,0.3*i,0.2*i)
  # Move the object
  house2 = np.dot(T3,house)

  
  obj2.set_data(house2[0,:], house2[1,:])
  obj2.set_3d_properties(house2[2,:])
  
  return (obj2,)

# Make the animation
anim = animation.FuncAnimation(fig, animate, init_func=init,
                             frames=100, interval=100, blit=True)

# Note: below is the part which makes it work on Colab
rc('animation', html='jshtml')
anim