# -*- coding: utf-8 -*-
"""Exercicio_VetoresMatrizes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f0fJldBnGdzJ0GPV6223ZWT-iwqpaBSQ

Exercício:

p = [3,1,0,4]

q = [2,4,8,0]
"""

import numpy as np
import scipy



"""v = p + q

a = p(quarto elemento) + q(segundo elemento)

b = p(primeiro elemento:terceiro elemento)

w = [p,q] (concatenação de p e q)
"""

p = np.array([3,1,0,4])
q = np.array([2,4,8,0])
print("p: ", p, '\n')
print("q: ", q, '\n')

v = p+q
print("v: ", v, '\n')

a = p[3] + q[1]
print("a = p[3] + q[1]: ", p[3], '+', q[1], '=', a, '\n')

b = p[0:3]
print("b: ", b, '\n')

w = np.hstack((p, q))
print("w: ", w, '\n')

"""M = matriz de uns 4x6

M2 = 2 x M

Mudar segunda linha de M2 para [3,8,4.5,0,9,7]

M3 = transposta de M2
"""

M = np.ones((4,6))
print("M: \n", M, '\n')

M2 = np.ones((4,6))
M2 = 2*M
print("M2: \n", M2, '\n')

M2 = np.vstack((M2[0:1], [3,8,4.5,0,9,7],M2[1:-1]))
print("M2: \n", M2, '\n')

M3 = np.transpose(M2)
print("M3: \n", M3, '\n')

"""Criar as matrizes:

> 
$T = \begin{bmatrix}
1 & 0 & 0  & 4 \\ 
0 & 1 & 0  & -1 \\ 
0 & 0  & 1  & 3 \\ 
0 & 0 & 0  & 1 \\ 
\end{bmatrix}$

$R = \begin{bmatrix}
cos(90) & -sen(90) & 0  & 0 \\ 
sen(90) & cos(90) & 0  & 0 \\ 
0 & 0  & 1  & 0 \\ 
0 & 0 & 0  & 1 \\ 
\end{bmatrix}$

$v1 = [1,0,0,0]$

$p = [1,3,0,1]$

$obj = \begin{bmatrix}
0 & 1 & 1  & 0 \\ 
0 & 0 & 1  & 1 \\ 
0 & 0 & 0  & 0 \\ 
1 & 1 & 1  & 1 \\ 
\end{bmatrix}$

$p1 = T.p$

$v2 = T.v1$

$v3 = R.v1$

$M1 = T.R$

$M2 = R.T$

$obj1 = T.obj$

$obj2 = M1.obj$





"""

#from numpy import pi

T = np.eye(4, dtype=int)
T[0,3] = 4
T[1,3] = -1
T[2,3] = 3
print("T: \n", T, '\n')

R = np.array([
    [np.cos((np.pi)/2), -1*np.sin((np.pi)/2), 0, 0],
    [np.sin((np.pi)/2), np.cos((np.pi)/2), 0, 0],
    [0, 0, 1, 0],
    [0, 0, 0, 1]
]) # scipy removera funcoes trigonimetricas, usa-se numpy

v1 = np.array([1,0,0,0]) 
p = np.array([1,3,0,1])

obj = np.matrix("0 1 1 0; 0 0 1 1; 0 0 0 0; 1 1 1 1")
print("obj: \n", obj, '\n')

p1 = np.dot(T,p)
v2 = np.dot(T,v1)
v3 = np.dot(R,v1)
M1 = np.dot(T,R)
M2 = np.dot(R,T)
obj1 = np.dot(T,obj)
obj2 = np.dot(M1,obj)

print("M1: \n", M1, '\n')
print("obj1: \n", obj1, '\n')
print("obj2: \n", obj2, '\n')